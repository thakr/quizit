generator client {
  provider = "prisma-client-js"
  previewFeatures = ["omitApi","driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}


model Quiz {
  id        String  @id @default(cuid())
  title     String
  questions Question[]
  timeLimit Int? // in seconds
  description String?
  author    User    @relation(fields: [authorId], references: [id])
  authorId String 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  acceptingAnswers Boolean @default(true)
}

model Question {
  id      String     @id @default(cuid())
  quiz    Quiz    @relation(fields: [quizId], references: [id])
  quizId  String
  question   String
  answers String[]
  answerType AnswerType
  choices String[]
  responses Response[]
  value Int @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum AnswerType {
  LONG_TEXT
  MULTIPLE_CHOICE
  SHORT_TEXT_NUMBER
  SHORT_TEXT
}

model Response {
  id  String @id @default(cuid())
  user User @relation(fields: [userId], references: [id])
  userId String
  question Question @relation(fields: [questionId], references: [id])
  questionId String
  answer String
}
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  quizzes Quiz[]
  responses Response[]
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}